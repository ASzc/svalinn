import ca.szc.svalinn {
    Sha1
}
import ceylon.test {
    test,
    assertEquals
}

class Sha1Test() {
    Sha1 h = Sha1();
    
    test
    shared void blank() {
        value expected = Array<Byte> { for (b in { #da, #39, #a3, #ee, #5e, #6b, #4b, #0d, #32, #55, #bf, #ef, #95, #60, #18, #90, #af, #d8, #07, #09 }) b.byte };
        assertEquals(h.last(arrayOfSize(0, 0.byte)), expected);
    }
    
    test
    shared void oneChar() {
        value expected = Array<Byte> { for (b in { #86, #f7, #e4, #37, #fa, #a5, #a7, #fc, #e1, #5d, #1d, #dc, #b9, #ea, #ea, #ea, #37, #76, #67, #b8 }) b.byte };
        assertEquals(h.last(Array<Byte> { #61.byte }), expected);
    }
    
    "Example #1 from [NIST]
     (http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/SHA1.pdf)"
    test
    shared void nistOneBlock() {
        value expected = Array<Byte> { for (b in { #a9, #99, #3e, #36, #47, #06, #81, #6a, #ba, #3e, #25, #71, #78, #50, #c2, #6c, #9c, #d0, #d8, #9d }) b.byte };
        assertEquals(h.last(Array<Byte> { #61.byte, #62.byte, #63.byte }), expected);
    }
    
    "Example #2 from [NIST]
     (http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/SHA1.pdf)"
    test
    shared void nistTwoBlock() {
        value expected = Array<Byte> { for (b in { #84, #98, #3e, #44, #1c, #3b, #d2, #6e, #ba, #ae, #4a, #a1, #f9, #51, #29, #e5, #e5, #46, #70, #f1 }) b.byte };
        value input = Array<Byte> { for (b in { #61, #62, #63, #64, #62, #63, #64, #65, #63, #64, #65, #66, #64, #65, #66, #67, #65, #66, #67, #68, #66, #67, #68, #69, #67, #68, #69, #6a, #68, #69, #6a, #6b, #69, #6a, #6b, #6c, #6a, #6b, #6c, #6d, #6b, #6c, #6d, #6e, #6c, #6d, #6e, #6f, #6d, #6e, #6f, #70, #6e, #6f, #70, #71 }) b.byte };
        assertEquals(h.last(input), expected);
    }
    
    test
    shared void threeBlocks() {
        value expected = Array<Byte> { for (b in { #38, #cf, #d0, #d4, #5d, #0f, #09, #14, #89, #4b, #60, #93, #bf, #7d, #3b, #69, #21, #e7, #04, #72 }) b.byte };
        // abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopqergegsgtertghrtxcbvxc
        value input = Array<Byte> { for (b in { #61, #62, #63, #64, #62, #63, #64, #65, #63, #64, #65, #66, #64, #65, #66, #67, #65, #66, #67, #68, #66, #67, #68, #69, #67, #68, #69, #6a, #68, #69, #6a, #6b, #69, #6a, #6b, #6c, #6a, #6b, #6c, #6d, #6b, #6c, #6d, #6e, #6c, #6d, #6e, #6f, #6d, #6e, #6f, #70, #6e, #6f, #70, #71, #65, #72, #67, #65, #67, #73, #67, #74, #65, #72, #74, #67, #68, #72, #74, #78, #63, #62, #76, #78, #63 }) b.byte };
        assertEquals(h.last(input), expected);
    }
    
    test
    shared void loremIpsum1Para() {
        value expected = Array<Byte> { for (b in { #cb, #2b, #fe, #8b, #43, #36, #2e, #b5, #b5, #6b, #83, #13, #69, #36, #65, #63, #07, #59, #52, #a4 }) b.byte };
        value input = Array<Byte> { for (b in { #4c, #6f, #72, #65, #6d, #20, #69, #70, #73, #75, #6d, #20, #64, #6f, #6c, #6f, #72, #20, #73, #69, #74, #20, #61, #6d, #65, #74, #2c, #20, #63, #6f, #6e, #73, #65, #63, #74, #65, #74, #75, #72, #20, #61, #64, #69, #70, #69, #73, #63, #69, #6e, #67, #20, #65, #6c, #69, #74, #2e, #20, #44, #6f, #6e, #65, #63, #20, #61, #20, #64, #69, #61, #6d, #20, #6c, #65, #63, #74, #75, #73, #2e, #20, #53, #65, #64, #20, #73, #69, #74, #20, #61, #6d, #65, #74, #20, #69, #70, #73, #75, #6d, #20, #6d, #61, #75, #72, #69, #73, #2e, #20, #4d, #61, #65, #63, #65, #6e, #61, #73, #20, #63, #6f, #6e, #67, #75, #65, #20, #6c, #69, #67, #75, #6c, #61, #20, #61, #63, #20, #71, #75, #61, #6d, #20, #76, #69, #76, #65, #72, #72, #61, #20, #6e, #65, #63, #20, #63, #6f, #6e, #73, #65, #63, #74, #65, #74, #75, #72, #20, #61, #6e, #74, #65, #20, #68, #65, #6e, #64, #72, #65, #72, #69, #74, #2e, #20, #44, #6f, #6e, #65, #63, #20, #65, #74, #20, #6d, #6f, #6c, #6c, #69, #73, #20, #64, #6f, #6c, #6f, #72, #2e, #20, #50, #72, #61, #65, #73, #65, #6e, #74, #20, #65, #74, #20, #64, #69, #61, #6d, #20, #65, #67, #65, #74, #20, #6c, #69, #62, #65, #72, #6f, #20, #65, #67, #65, #73, #74, #61, #73, #20, #6d, #61, #74, #74, #69, #73, #20, #73, #69, #74, #20, #61, #6d, #65, #74, #20, #76, #69, #74, #61, #65, #20, #61, #75, #67, #75, #65, #2e, #20, #4e, #61, #6d, #20, #74, #69, #6e, #63, #69, #64, #75, #6e, #74, #20, #63, #6f, #6e, #67, #75, #65, #20, #65, #6e, #69, #6d, #2c, #20, #75, #74, #20, #70, #6f, #72, #74, #61, #20, #6c, #6f, #72, #65, #6d, #20, #6c, #61, #63, #69, #6e, #69, #61, #20, #63, #6f, #6e, #73, #65, #63, #74, #65, #74, #75, #72, #2e, #20, #44, #6f, #6e, #65, #63, #20, #75, #74, #20, #6c, #69, #62, #65, #72, #6f, #20, #73, #65, #64, #20, #61, #72, #63, #75, #20, #76, #65, #68, #69, #63, #75, #6c, #61, #20, #75, #6c, #74, #72, #69, #63, #69, #65, #73, #20, #61, #20, #6e, #6f, #6e, #20, #74, #6f, #72, #74, #6f, #72, #2e, #20, #4c, #6f, #72, #65, #6d, #20, #69, #70, #73, #75, #6d, #20, #64, #6f, #6c, #6f, #72, #20, #73, #69, #74, #20, #61, #6d, #65, #74, #2c, #20, #63, #6f, #6e, #73, #65, #63, #74, #65, #74, #75, #72, #20, #61, #64, #69, #70, #69, #73, #63, #69, #6e, #67, #20, #65, #6c, #69, #74, #2e, #20, #41, #65, #6e, #65, #61, #6e, #20, #75, #74, #20, #67, #72, #61, #76, #69, #64, #61, #20, #6c, #6f, #72, #65, #6d, #2e, #20, #55, #74, #20, #74, #75, #72, #70, #69, #73, #20, #66, #65, #6c, #69, #73, #2c, #20, #70, #75, #6c, #76, #69, #6e, #61, #72, #20, #61, #20, #73, #65, #6d, #70, #65, #72, #20, #73, #65, #64, #2c, #20, #61, #64, #69, #70, #69, #73, #63, #69, #6e, #67, #20, #69, #64, #20, #64, #6f, #6c, #6f, #72, #2e, #20, #50, #65, #6c, #6c, #65, #6e, #74, #65, #73, #71, #75, #65, #20, #61, #75, #63, #74, #6f, #72, #20, #6e, #69, #73, #69, #20, #69, #64, #20, #6d, #61, #67, #6e, #61, #20, #63, #6f, #6e, #73, #65, #71, #75, #61, #74, #20, #73, #61, #67, #69, #74, #74, #69, #73, #2e, #20, #43, #75, #72, #61, #62, #69, #74, #75, #72, #20, #64, #61, #70, #69, #62, #75, #73, #20, #65, #6e, #69, #6d, #20, #73, #69, #74, #20, #61, #6d, #65, #74, #20, #65, #6c, #69, #74, #20, #70, #68, #61, #72, #65, #74, #72, #61, #20, #74, #69, #6e, #63, #69, #64, #75, #6e, #74, #20, #66, #65, #75, #67, #69, #61, #74, #20, #6e, #69, #73, #6c, #20, #69, #6d, #70, #65, #72, #64, #69, #65, #74, #2e, #20, #55, #74, #20, #63, #6f, #6e, #76, #61, #6c, #6c, #69, #73, #20, #6c, #69, #62, #65, #72, #6f, #20, #69, #6e, #20, #75, #72, #6e, #61, #20, #75, #6c, #74, #72, #69, #63, #65, #73, #20, #61, #63, #63, #75, #6d, #73, #61, #6e, #2e, #20, #44, #6f, #6e, #65, #63, #20, #73, #65, #64, #20, #6f, #64, #69, #6f, #20, #65, #72, #6f, #73, #2e, #20, #44, #6f, #6e, #65, #63, #20, #76, #69, #76, #65, #72, #72, #61, #20, #6d, #69, #20, #71, #75, #69, #73, #20, #71, #75, #61, #6d, #20, #70, #75, #6c, #76, #69, #6e, #61, #72, #20, #61, #74, #20, #6d, #61, #6c, #65, #73, #75, #61, #64, #61, #20, #61, #72, #63, #75, #20, #72, #68, #6f, #6e, #63, #75, #73, #2e, #20, #43, #75, #6d, #20, #73, #6f, #63, #69, #69, #73, #20, #6e, #61, #74, #6f, #71, #75, #65, #20, #70, #65, #6e, #61, #74, #69, #62, #75, #73, #20, #65, #74, #20, #6d, #61, #67, #6e, #69, #73, #20, #64, #69, #73, #20, #70, #61, #72, #74, #75, #72, #69, #65, #6e, #74, #20, #6d, #6f, #6e, #74, #65, #73, #2c, #20, #6e, #61, #73, #63, #65, #74, #75, #72, #20, #72, #69, #64, #69, #63, #75, #6c, #75, #73, #20, #6d, #75, #73, #2e, #20, #49, #6e, #20, #72, #75, #74, #72, #75, #6d, #20, #61, #63, #63, #75, #6d, #73, #61, #6e, #20, #75, #6c, #74, #72, #69, #63, #69, #65, #73, #2e, #20, #4d, #61, #75, #72, #69, #73, #20, #76, #69, #74, #61, #65, #20, #6e, #69, #73, #69, #20, #61, #74, #20, #73, #65, #6d, #20, #66, #61, #63, #69, #6c, #69, #73, #69, #73, #20, #73, #65, #6d, #70, #65, #72, #20, #61, #63, #20, #69, #6e, #20, #65, #73, #74, #2e }) b.byte };
        assertEquals(h.last(input), expected);
    }
}
